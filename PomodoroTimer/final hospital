from tkinter import ttk
from tkinter import *
from PIL import Image, ImageTk
import os
import psycopg2
from psycopg2 import OperationalError
from tkinter import messagebox
import smtplib


def send_mail(rec_mail):
    sender_email = 'ramixxzzbuc@gmail.com'
    sender_password = os.getenv('password')
    rec_email = rec_mail

    connec = smtplib.SMTP("smtp.gmail.com", 587)
    connec.starttls() # to make a securse connection
    connec.login(user=sender_email, password=sender_password)
    connec.sendmail(from_addr=sender_email, to_addrs=rec_email, msg='subject:Critical security alert\n\n'
                                                                    'Some one try to login to your pgAdmin account\n'
                                                                    'Don`t share your password with any one')
    connec.close()


bg_color = '#ddedea'
FONT_NAME = "pixer"
remaining_tries = 2

PASSWORD = os.getenv('python_db_pass')


def first_page():
    # -----------------------connect 2 database--------------
    def get_query(input_text, cursor2, output_text, connection):
        output_text.delete('1.0', 'end')
        query = input_text.get('1.0', 'end')
        cursor2.execute(query)
        is_fetch = messagebox.askyesno(title='What do u think', message='Do you expect to fetch data from this query?')
        if is_fetch:
            for index, row in enumerate(cursor2.fetchall()):
                output_text.insert(f'{index}.0', f'{row}\n')
        else:
            output_text.insert(f'1.0', 'Done')
            connection.commit()

    def connect(user, pas):
        return psycopg2.connect(user=user, password=pas, port=5432, database='hospital_mangment', host='localhost')

    def connect_db(username, password):
        global remaining_tries
        Username = username.get()
        Password = password.get()
        is_true = True

        try:
            if Password == 'open its me':
                    Password = PASSWORD

            if remaining_tries > 0:
                with connect(Username, Password) as connection:
                            # make a cursor to execute commands on database
                    cursor = connection.cursor()
                    second_page(cursor, connection)
            else:
                login_button.destroy()
                locked_btn.grid(column=1, row=3, columnspan=2)
                if Username == 'postgres':
                    send_mail('ramixxzzbuc@gmail.com')

        except OperationalError as err:


            if remaining_tries > 0:
                remaining_tries -= 1
                messagebox.askretrycancel(title=f'{err}',
                                                       message=f'please make '
                                                               f'sure to enter your '
                                                              f'right credentials \n'
                                                               f'you have {remaining_tries+1} more tries!!')



        except Exception as error:
            messagebox.showinfo(title='Error', message=f'{error}')
    # ---------------------- UI Setup ---------------------- #

    def second_page(cursor1, connection1):

        # Checking for validity
        hospital_label.destroy()
        user_label.destroy()
        pass_label.destroy()
        login_button.destroy()
        user_entry.destroy()
        pass_entry.destroy()
        text_frame = Frame(window)
        window.geometry(f'660x630+{center_x}+{center_y}')
        window.resizable(False, False)
        h1_label = Label(window, text='Query Editor', bg=bg_color, fg='black', font=(FONT_NAME, 20))
        h1_label.grid(column=0, row=0, sticky='nw')
        input_text = Text(window, height=8, font=(FONT_NAME, 12))
        input_text.insert('1.0', 'select * from employee')
        input_text.grid(column=0, row=1, sticky='we')
        yscroll_bar = Scrollbar(text_frame)
        yscroll_bar.grid(column=1, row=3, sticky='ns')
        xscroll_bar = Scrollbar(text_frame, orient="horizontal")
        xscroll_bar.grid(column=0, row=4, sticky='we')
        # +++++++++==+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        output_text = Text(text_frame, height=20, wrap='none')
        output_text.grid(column=0, row=3)

        run_button = Button(window, image=run_image, borderwidth=0, bg=bg_color, activebackground=bg_color,
                            text='Run', compound='right',
                            font=(FONT_NAME, 33),
                            command=lambda: get_query(input_text, cursor1, output_text, connection1)
                            )
        run_button.grid(column=0, row=2, sticky='ne')
        output_text.config(yscrollcommand=yscroll_bar.set)
        output_text.config(xscrollcommand=xscroll_bar.set)
        yscroll_bar.config(command=output_text.yview)
        xscroll_bar.config(command=output_text.xview)
        text_frame.grid(column=0, row=3)

    window = Tk()
    window.config(bg=bg_color)

    window.title('pgAdmin')
    window.iconbitmap(r'C:\Users\rami\Downloads\server.ico')
    window.iconbitmap()
    window_width = 1200
    window_height = 800
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    center_x = int(screen_width / 2 - window_width / 2)
    center_y = int(screen_height / 2 - window_height / 2)
    # width x height + x + y
    window.geometry(f'{window_width}x{window_height}+{center_x}+{center_y}')

    # Images
    hospital_image = PhotoImage(file="hospital.png")
    # Background
    background_image = Image.open("background.png")
    resize_background = background_image.resize((1200, 800), Image.ANTIALIAS)
    new_background = ImageTk.PhotoImage(resize_background)
    # Background label

    Background_label = Label(window, image=new_background)
    Background_label.place(x=0, y=0)

    # Hospital Image
    hospital_label = Label(window, image=hospital_image, borderwidth=0)
    hospital_label.config(width=480, height=470, bg=bg_color, pady=60)
    hospital_label.grid(column=1, row=0, columnspan=2)
    # Hospital_canvas = Canvas(width=480, height=470, highlightthickness=0, bg=bg_color)
    # Hospital_canvas.create_image(240, 240, image=hospital_image)
    # Hospital_canvas.grid(column=1, row=0, columnspan=2)

    # Rest of the Labels
    user_label = Label(window, text="Username : ", font=(FONT_NAME, 32, "bold"), padx=130, justify="right", bg=bg_color)
    user_label.config(width=4, height=1)
    user_label.grid(column=0, row=1)

    pass_label = Label(window, text="Password : ", font=(FONT_NAME, 32, "bold"), padx=130, justify="right", bg=bg_color)
    pass_label.config(width=4, height=1)
    pass_label.grid(column=0, row=2)

    # Entries
    user_entry = ttk.Entry(window, width=40, cursor="hand1", font=(FONT_NAME, 15, "bold"))
    user_entry.grid(column=1, row=1, columnspan=2)
    pass_entry = ttk.Entry(window, width=40, show="*", cursor="hand1", font=(FONT_NAME, 15, "bold"))
    pass_entry.grid(column=1, row=2, columnspan=2)

    # Buttons
    image = Image.open('run.png')
    resize_image = image.resize((80, 80))
    run_image = ImageTk.PhotoImage(resize_image)
    login_image = PhotoImage(file="login.png")
    login_button = Button(window, image=login_image,
                          borderwidth=0, bg=bg_color,
                          activebackground=bg_color, command=lambda: connect_db(user_entry, pass_entry))
    login_button.config(width=360, height=130)
    login_button.grid(column=1, row=3, columnspan=2)
    # locked button
    #
    # locked_image = PhotoImage(file="locked.png")
    # locked_btn = Button(window, image=locked_image,
    #                       borderwidth=0, bg=bg_color,
    #                       activebackground=bg_color, command=lambda: connect_db(user_entry, pass_entry))
    # locked_btn.config(width=360, height=130)
    meme_photo = Image.open("meme.png")
    resize_image = meme_photo.resize((330, 165), Image.ANTIALIAS)
    new_meme_image = ImageTk.PhotoImage(resize_image)
    # locked_image = PhotoImage(file="locked2.png")
    locked_btn = Label(window, image=new_meme_image, bg=bg_color)
    # locked_btn.config(width=360, height=130)

    window.mainloop()


if _name_ == '_main_':
    first_page()